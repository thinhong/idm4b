{
  "hash": "db9273466c8f291151d7d75b4e983ddb",
  "result": {
    "engine": "knitr",
    "markdown": "# Least squares estimation\n\n::: {.callout-note}\n\n## Preparation\n\nDownload influenza incidence data here:\n\n\n{{< downloadthis data/flu_inc.rds dname=\"flu_inc\" label=\"flu_inc.rds\" type=light >}}\n\n\n\n:::\n\n## Methods\n\nRefer to @def-residual, the residual sum of squares (RSS) is the sum of the squares of residuals.\n\n$$RSS = \\sum_{i = 1}^{n}[y_i - f(x_i)]^2$$\n\n-   $y_i$: the observed value.\n-   $f(x_i)$: the predicted value.\n-   $y_i - f(x_i)$: the residual.\n\nThe least squares method finds the optimal parameters by **minimizing the RSS**.\n\n## Code {#sec-lse-code}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyr)\nlibrary(deSolve)\nlibrary(ggplot2)\nlibrary(RColorBrewer)\n```\n:::\n\n\nWe will use data collected during a H1N1 influenza outbreak in an elementary school in Pennsylvania [@cauchemez2011]. Let load the data and have a look.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- readRDS(\"data/flu_inc.rds\")\n\nggplot(df, aes(x = day, y = inc)) +\n  geom_point() +\n  labs(x = \"Day\", y = \"Incidence\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](lse_files/figure-html/unnamed-chunk-2-1.svg){width=100%}\n:::\n:::\n\n\nWe will fit a deterministic SEIR model and reuse the code from @lst-seir-det. Let plug some initial values for the parameters and run the model.\n\n\n::: {.cell}\n\n:::\n\n\nLooking at the original paper, the school has 370 students [@cauchemez2011]. So we set the initial values as below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nS0 <- 369\nE0 <- 0\nI0 <- 1\nR0 <- 0\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npred <- seir_mod(beta = 0.004, sigma = 0.5, gamma = 0.5, S0 = S0, E0 = E0, I0 = I0, R0 = R0, times = df$day)\n\ndf_plot <- pivot_longer(pred, cols = S:Inc, names_to = \"comp\", values_to = \"n\")\n\nmy_palette <- brewer.pal(11, \"PuOr\")[c(10, 1, 4, 3, 8)]\n\nggplot(df_plot, aes(x = time, y = n, color = comp)) +\n  geom_point() + geom_line() +\n  scale_color_manual(values = my_palette, breaks = c(\"S\", \"E\", \"Inc\", \"I\", \"R\")) +\n  labs(color = NULL, y = NULL, x = \"Day\") +\n  theme_minimal() +\n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](lse_files/figure-html/unnamed-chunk-5-1.svg){width=100%}\n:::\n:::\n\n\nNow just plot the incidence to compare with our data.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ndf_plot <- pred[,c(\"time\", \"Inc\")]\nggplot(df_plot, aes(x = time, y = Inc)) +\n  geom_point(color = my_palette[3]) +\n  geom_line(color = my_palette[3]) +\n  geom_point(data = df, aes(x = day, y = inc)) +\n  labs(x = \"Day\", y = \"Incidence\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](lse_files/figure-html/unnamed-chunk-6-1.svg){width=100%}\n:::\n:::\n\n\nWe need to calculate the residual sum of squares. The `rss()` function must be defined this way with 2 arguments `data` and `par` so that it could be passed to the `optim()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrss <- function(data, par) {\n  pred <- seir_mod(beta = par[1], sigma = par[2], gamma = par[3], S0 = S0, E0 = E0, I0 = I0, R0 = R0, times = 0:(length(data) - 1))\n  sum((data - pred$Inc)^2)\n}\n```\n:::\n\n\nThe `optim()` function needs at least 2 inputs:\n\n- `par`: a vector of initial values for the parameters to be optimized over.\n- `fn`: a function to be minimized.\n- `...`: other arguments will be passed to `fn`, here our function `rss()` needs an additional argument `data`, so we pass `data = df$inc`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseir_optim <- optim(par = c(0.004, 0.5, 0.5), fn = rss, data = df$inc)\nseir_optim\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$par\n[1] 0.007665126 1.697323120 2.209129854\n\n$value\n[1] 147.9004\n\n$counts\nfunction gradient \n     197       NA \n\n$convergence\n[1] 0\n\n$message\nNULL\n```\n\n\n:::\n:::\n\n\nLet plug these values into the model and compare with our data.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npred <- seir_mod(beta = seir_optim$par[1], sigma = seir_optim$par[2], gamma = seir_optim$par[3], S0 = S0, E0 = E0, I0 = I0, R0 = R0, times = df$day)\ndf_plot <- pred[,c(\"time\", \"Inc\")]\nggplot(df_plot, aes(x = time, y = Inc)) +\n  geom_point(color = my_palette[3]) +\n  geom_line(color = my_palette[3]) +\n  geom_point(data = df, aes(x = day, y = inc)) +\n  labs(x = \"Day\", y = \"Incidence\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](lse_files/figure-html/unnamed-chunk-9-1.svg){width=100%}\n:::\n:::\n\n\nSince we are using a \"closed population\" SEIR model, $R_0 = \\frac{\\beta}{\\gamma} S_0$.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrnum0 <- seir_optim$par[1] * S0 / seir_optim$par[3]\nrnum0\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.280337\n```\n\n\n:::\n:::\n\n\nThis is quite close to 1.4 (95% CI: 1.2, 1.5) as reported by [@cauchemez2011], considering that they used more complicated methods.",
    "supporting": [
      "lse_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}