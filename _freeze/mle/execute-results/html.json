{
  "hash": "13318a29c25100542b340ed4011179e1",
  "result": {
    "engine": "knitr",
    "markdown": "# Maximum likelihood estimation\n\n::: {.callout-note}\n\n## Preparation\n\nDownload influenza incidence data here:\n\n\n{{< downloadthis data/flu_inc.csv dname=\"flu_inc\" label=\"flu_inc.csv\" type=light >}}\n\n\n\n:::\n\n## Methods\n\nThe maximum likelihood estimation follows 4 steps:\n\n- **Step 1**. Write down the likelihood function $L(\\theta)$. Likelihood function is a function of $\\theta$, which is the product of the $n$ mass/density function terms of the observed values $y_i$.\n\n$$L(\\theta) = \\prod_{i = 1}^{n} f_Y(y_i| \\theta)$$\n\n- **Step 2**. Take the natural log of the likelihood $log L(\\theta)$, or log-likelihood. The production in likelihood now becomes the sum in log-likelihood. See @sec-calib-loglik for more details.\n\n$$log L(\\theta) = \\sum_{i = 1}^{n} log \\left[ f_Y(y_i| \\theta) \\right]$$\n\n- **Step 3**. Take the negative log-likelihood $- log L(\\theta)$. Because optimizers work by minimizing a function, we have to work on negative log-likelihood. See @sec-calib-negloglik for more details.\n\n$$- log L(\\theta) = - \\sum_{i = 1}^{n} log \\left[ f_Y(y_i| \\theta) \\right]$$\n\n- **Step 4**. The optimizer try different values of $\\theta$ in the paramater space $\\Theta$ for which negative log-likelihood $- log L(\\theta)$ is minimized.\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyr)\nlibrary(odin)\nlibrary(bbmle)\nlibrary(ggplot2)\nlibrary(RColorBrewer)\n```\n:::\n\n\nWe will use the same data of a H1N1 influenza outbreak in an elementary school in @sec-lse-code and fit the deterministic SEIR model with code @lst-seir-det.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- read.csv(\"data/flu_inc.csv\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n\nLooking at the original paper, the school has 370 students [@cauchemez2011]. So we set the initial values as below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nS0 <- 369\nE0 <- 0\nI0 <- 1\nR0 <- 0\n```\n:::\n\n\n- **Step 1**. Write down the likelihood function $L(\\theta)$.\n\nWe assume the incidence data is generated from a normal distribution with mean $\\mu_{inc}$ is the predicted incidence and a standard deviation $\\sigma_{inc}$.\n\n$$L(\\theta) = \\prod_{i = 1}^{n} \\mathcal{N}(\\mu_{inc}, \\sigma_{inc})$$\n\nWe use the `dnorm()` function to define this likelihood.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndnorm(x = data, mean = pred, sd = sd_inc)\n```\n:::\n\n\n- **Step 2**. Take the natural log of the likelihood $log L(\\theta)$, product becomes sum.\n\n$$log L(\\theta) = \\sum_{i = 1}^{n} log \\left[ \\mathcal{N}(\\mu_{inc}, \\sigma_{inc}) \\right]$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(dnorm(x = data, mean = pred, sd = sd_inc, log = T))\n```\n:::\n\n\n- **Step 3**. Take the negative log-likelihood $- log L(\\theta)$.\n\n$$- log L(\\theta) = - \\sum_{i = 1}^{n} log \\left[ \\mathcal{N}(\\mu_{inc}, \\sigma_{inc}) \\right]$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\n- sum(dnorm(x = data, mean = pred, sd = sd_inc, log = T))\n```\n:::\n\n\n- **Step 4**. Pass the negative log-likelihood $- log L(\\theta)$ to the optimizer.\n\n[Root mean squared error as SD](https://hankstevens.github.io/Primer-of-Ecology/disease.html)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmll <- function(beta, sigma, gamma, sd_inc) {\n  # Make sure that parameters are positive\n  beta <- exp(beta) \n  sigma <- exp(sigma)\n  gamma <- exp(gamma)\n  sd_inc <- exp(sd_inc)\n  \n  pred <- seir_mod(beta = beta, sigma = sigma, gamma = gamma, S0 = S0, E0 = E0, I0 = I0, R0 = R0, times = 0:(length(df$inc) - 1))\n  pred <- pred$Inc\n  # Return the negative log-likelihood\n  - sum(dnorm(x = df$inc, mean = pred, sd = sd_inc, log = T))\n}\n\nstarting_param_val <- list(beta = 0.004, sigma = 0.5, gamma = 0.5, sd_inc = 3)\n\nestimates <- mle2(minuslogl = mll, start = lapply(starting_param_val, log), method = \"Nelder-Mead\")\n\nsummary(estimates)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMaximum likelihood estimation\n\nCall:\nmle2(minuslogl = mll, start = lapply(starting_param_val, log), \n    method = \"Nelder-Mead\")\n\nCoefficients:\n        Estimate Std. Error  z value     Pr(z)    \nbeta   -5.063479   0.092641 -54.6567 < 2.2e-16 ***\nsigma   0.708384   0.134498   5.2669 1.388e-07 ***\ngamma   0.600399   0.092968   6.4581 1.060e-10 ***\nsd_inc  0.530870   0.099628   5.3285 9.902e-08 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n-2 log L: 198.8602 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nparams <- exp(coef(estimates))\nparams\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       beta       sigma       gamma      sd_inc \n0.006323524 2.030707475 1.822846603 1.700410622 \n```\n\n\n:::\n:::\n\n\nCompare the model with data.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npred <- seir_mod(beta = params[1], sigma = params[2], gamma = params[3], S0 = S0, E0 = E0, I0 = I0, R0 = R0, times = df$day)\ndf_plot <- pred[,c(\"t\", \"Inc\")]\n\n# Compute 95% confidence interval\nlwr <- qnorm(p = 0.025, mean = pred$Inc, sd = params[4])\nupr <- qnorm(p = 0.975, mean = pred$Inc, sd = params[4])\n\nmy_palette <- brewer.pal(11, \"PuOr\")[c(10, 1, 4, 3, 8)]\n\nggplot(df_plot, aes(x = t, y = Inc)) +\n  geom_line(color = my_palette[3]) +\n  geom_ribbon(aes(ymin = lwr, ymax = upr), fill = my_palette[3], alpha = 0.15) +\n  geom_point(data = df, aes(x = day, y = inc)) +\n  coord_cartesian(ylim = c(0, max(upr))) +\n  labs(x = \"Day\", y = \"Incidence\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](mle_files/figure-html/unnamed-chunk-10-1.svg){width=100%}\n:::\n:::\n\n\nIt looks very similar to the model we fitted with LSE at @fig-lse-seir.\n\nLet compute $R_0$. For a \"closed population\" SEIR model, $R_0 = \\frac{\\beta}{\\gamma} S_0$. Again, this is similar to the $R_0$ estimated from LSE at @lst-lse-r0. The reason is MLE is equal to LSE when we pick the normal distribution likelihood, see @sec-calib-mle-lse for more details.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrnum0 <- params[1] * S0 / params[3]\nrnum0\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    beta \n1.280075 \n```\n\n\n:::\n:::\n",
    "supporting": [
      "mle_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}