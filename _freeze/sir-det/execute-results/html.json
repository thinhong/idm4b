{
  "hash": "8c39e81ff673195fd43243ea07538ef5",
  "result": {
    "engine": "knitr",
    "markdown": "# SIR\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyr)\nlibrary(deSolve)\nlibrary(bbmle)\nlibrary(ggplot2)\n```\n:::\n\n\n## Assumptions\n\n-   Well-mixed population, or homogeneous mixing (a single contact rate $\\beta$).\n-   The most basic form balances demographic processes (births $B$ and deaths $\\mu$).\n-   Infectious disease properties are for a single pathogen.\n\n## Model\n\nForce of infection $\\lambda = \\frac{\\beta I}{N}$\n\n$$\\frac{dS}{dt} = -\\lambda S$$\n\n$$\\frac{dI}{dt} = \\lambda S - \\gamma I$$\n\n$$\\frac{dR}{dt} = \\gamma I$$\n\n## Code\n\n### Model\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# sir_1() returns a data frame consists S, I, R values by time\nsir_1 <- function(beta, gamma, S0, I0, R0, times) {\n  \n  sir_equations <- function(time, variables, parameters) {\n    with(as.list(c(variables, parameters)), {\n      dS <- -beta * I * S\n      dI <-  beta * I * S - gamma * I\n      dR <-  gamma * I\n      return(list(c(dS, dI, dR)))\n    })\n  }\n  \n  parameters_values <- c(beta = beta, gamma = gamma)\n  initial_values <- c(S = S0, I = I0, R = R0)\n  \n  out <- ode(initial_values, times, sir_equations, parameters_values)\n\n  as.data.frame(out)\n}\n```\n:::\n\n\nLoad the flu data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflu <- readRDS(\"data/flu.rds\")\n```\n:::\n\n\nLet have a look at this flu data. This is a very special data as it reports the flu **prevalence**. Usually, case notification data reports **incidence**.\n\n::: {.callout-important}\nRemember to fit the correct thing in SIR model to case notification data:\n\n- Prevalence: fit to the **I compartment**.\n- Incidence: fit **only** to the $\\lambda S$.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(flu)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| time| prev|\n|----:|----:|\n|    0|    1|\n|    1|    6|\n|    2|   26|\n|    3|   73|\n|    4|  222|\n|    5|  293|\n\n</div>\n:::\n:::\n\n\nNow we run the SIR model, and compare predictions with the observed flu prevalence data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npred <- sir_1(beta = 0.004, gamma = 0.5, S0 = 999, I0 = 1, R0 = 0, times = flu$time)\n\ndf <- merge(x = pred, y = flu, by = \"time\")\ndf <- df[,c(\"time\", \"I\", \"prev\")]\n```\n:::\n\n\nBetter off seeing the comparison on a plot.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ndf_plot <- pivot_longer(df, cols = all_of(c(\"I\", \"prev\")), names_to = \"comp\", values_to = \"n\")\ndf_plot$comp <- factor(df_plot$comp, levels = c(\"prev\", \"I\"))\n\nggplot(df_plot, aes(x = time, y = n, color = comp)) +\n  geom_point() + geom_line() +\n  scale_color_hue(labels = c(\"Prevalence\", \"Prediction\")) +\n  labs(color = NULL) +\n  theme_light() +\n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](sir-det_files/figure-html/unnamed-chunk-6-1.svg){width=100%}\n:::\n:::\n\n\n### Parameter sensitivity\n\n#### Effective contact rate $\\beta$\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Try different gamma values\nbvals <- seq(0.001, 0.005, 0.001)\nl <- list()\nfor(i in 1:length(bvals)){\n  pred <- sir_1(beta = bvals[i], gamma = 0.5, S0 = 999, I0 = 1, R0 = 0, times = flu$time)[,c(\"time\", \"I\")]\n  colnames(pred) <- c(\"time\", paste0(\"I\", i))\n  l[[i]] <- pred\n}\nl[[length(l) + 1]] <- flu\n\n# Merge all with flu data\ndf <- Reduce(function(x, y) merge(x, y, by = \"time\", all = TRUE), l)\n\ndf_plot <- pivot_longer(df, cols = I1:prev, names_to = \"comp\", values_to = \"n\")\ndf_plot$comp <- factor(df_plot$comp, levels = c(\"prev\", paste0(\"I\", 1:length(bvals))))\n\nggplot(df_plot, aes(x = time, y = n, color = comp)) +\n  geom_point() + geom_line() +\n  scale_color_hue(labels = c(\"Prevalence\", paste0(\"\\u03b2 = \", bvals))) +\n  labs(color = NULL) +\n  theme_light() +\n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](sir-det_files/figure-html/unnamed-chunk-7-1.svg){width=100%}\n:::\n:::\n\n\n#### Recovery rate $\\gamma$\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Try different gamma values\ngvals <- seq(0.3, 0.7, 0.1)\nl <- list()\nfor(i in 1:length(gvals)){\n  pred <- sir_1(beta = 0.004, gamma = gvals[i], S0 = 999, I0 = 1, R0 = 0, times = flu$time)[,c(\"time\", \"I\")]\n  colnames(pred) <- c(\"time\", paste0(\"I\", i))\n  l[[i]] <- pred\n}\nl[[length(l) + 1]] <- flu\n\n# Merge all with flu data\ndf <- Reduce(function(x, y) merge(x, y, by = \"time\", all = TRUE), l)\n\ndf_plot <- pivot_longer(df, cols = I1:prev, names_to = \"comp\", values_to = \"n\")\ndf_plot$comp <- factor(df_plot$comp, levels = c(\"prev\", paste0(\"I\", 1:length(gvals))))\n\nggplot(df_plot, aes(x = time, y = n, color = comp)) +\n  geom_point() + geom_line() +\n  scale_color_hue(labels = c(\"Prevalence\", paste0(\"\\u03b3 = \", gvals))) +\n  labs(color = NULL) +\n  theme_light() +\n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](sir-det_files/figure-html/unnamed-chunk-8-1.svg){width=100%}\n:::\n:::\n\n\nWhen $\\gamma$ increase, the shape and time to reach the peak of the outbreak stay the same, the outbreak size is reduced. This is because **$\\gamma$ increase** means patients recover faster, they have **less time to infect** susceptible individuals, leading to a decrease in outbreak size.\n\n## Poisson distribution\n\nPoisson distribution is a **discrete probability distribution** that expresses probability of a given **number of events** occurring **in a fixed interval of time**[^1].\n\n[^1]: Wikipedia <https://en.wikipedia.org/wiki/Poisson_distribution>\n\nSuitable to use because here we are fitting a number of prev occurring in this period.\n\n",
    "supporting": [
      "sir-det_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}