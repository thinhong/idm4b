{
  "hash": "4e4a47dc211ae98832983c2418e3cc63",
  "result": {
    "engine": "knitr",
    "markdown": "# Calibration\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(deSolve)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nsir_mod <- function(beta, gamma, S0, I0, R0, times) {\n  \n  sir_equations <- function(time, variables, parameters) {\n    with(as.list(c(variables, parameters)), {\n      dS <- -beta * S * I\n      dI <-  beta * S * I - gamma * I\n      dR <-  gamma * I\n      return(list(c(dS, dI, dR)))\n    })\n  }\n  \n  parameters_values <- c(beta = beta, gamma = gamma)\n  initial_values <- c(S = S0, I = I0, R = R0)\n  \n  out <- ode(initial_values, times, sir_equations, parameters_values)\n\n  out <- as.data.frame(out)\n  # Compute incidence\n  out$Inc <- c(0, -diff(out$S))\n  out\n}\n```\n:::\n\n\n\nLoad the flu data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflu <- readRDS(\"data/flu.rds\")\nhead(flu)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| time| prev|\n|----:|----:|\n|    0|    1|\n|    1|    6|\n|    2|   26|\n|    3|   73|\n|    4|  222|\n|    5|  293|\n\n</div>\n:::\n:::\n\n\nNow we run the SIR model, and compare predictions with the observed flu prevalence data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npred <- sir_mod(beta = 0.004, gamma = 0.5, S0 = 999, I0 = 1, R0 = 0, times = flu$time)\n\ndf <- merge(x = pred, y = flu, by = \"time\")\ndf <- df[,c(\"time\", \"I\", \"prev\")]\n```\n:::\n\n\nBetter off seeing the comparison on a plot.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# df_plot <- pivot_longer(df, cols = all_of(c(\"I\", \"prev\")), names_to = \"comp\", values_to = \"n\")\n# df_plot$comp <- factor(df_plot$comp, levels = c(\"prev\", \"I\"))\n# \n# ggplot(df_plot, aes(x = time, y = n, color = comp)) +\n#   geom_point() + geom_line() +\n#   scale_color_hue(labels = c(\"Prevalence\", \"Prediction\")) +\n#   labs(color = NULL) +\n#   theme_light() +\n#   theme(legend.position = \"bottom\")\n```\n:::\n\n\nLet have a look at this flu data. This is a very special data as it reports the flu **prevalence**. Usually, case notification data reports **incidence**.\n\n## Log-likelihood\n\nThe likelihood is the probability of observing data $x$ given that our model is true[^2], $\\mathbb{P}(x|M)$.\n\nWe have a lot of data points, and they are independent. The probability of observing all these data points at the same time is the production of these likelihood $\\mathbb{P}(x_1|M) \\times \\mathbb{P}(x_2|M) \\times \\mathbb{P}(x_3|M)... = \\prod\\mathbb{P}(x|M)$.\n\nMultiplying things together, you will end up losing precision if the numbers are too low. Here you are dealing with probability (a value \\< 1), multiplying 100 probabilities you will end up with 1e-100.\n\nBut remember that $log(a \\times b) = log(a) + log(b)$, and very convenient that $log(1^{-100} = -230.2585)$.\n\nSo $log(\\mathbb{P}(x_1|M) \\times \\mathbb{P}(x_2|M) \\times \\mathbb{P}(x_3|M)...)$ $=$ $log(\\mathbb{P}(x_1|M)) + log(\\mathbb{P}(x_2|M)) + log(\\mathbb{P}(x_3|M))...$ and it is so much easier to handle.\n\n## Negative log-likelihood\n\nBecause statistical packages optimizers work by minimizing a function. Minimizing means **decrease the distance of two distributions** to its lowest, this is fairly easy because we get this when the distance close to 0 (just like the trick we do in hypothesis testing).\n\nMinimizing negative log-likelihood (meaning that $-1 \\times \\text{log-likelihood}$) is equivalent to maximizing the log-likelihood, which is what we want to do (MLE: maximum likelihood estimation).\n\n## Poisson distribution\n\nPoisson distribution is a **discrete probability distribution** that expresses probability of a given **number of events** occurring **in a fixed interval of time**[^sir-det-1].\n\n[^sir-det-1]: Wikipedia <https://en.wikipedia.org/wiki/Poisson_distribution>\n\nSuitable to use because here we are fitting a number of prev occurring in this period.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}