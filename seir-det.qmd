# SEIR

## Code

```{r, message=FALSE, warning=FALSE}
library(deSolve)
library(tidyr)
library(ggplot2)
library(RColorBrewer)
library(patchwork)
```

Let reuse the deterministic SIR model code from @lst-sir-det and write code for the deterministic SEIR model.

```{r, echo=FALSE}
sir_mod <- function(beta, gamma, S0, I0, R0, times) {
  
  sir_equations <- function(time, variables, parameters) {
    with(as.list(c(variables, parameters)), {
      dS <-   -beta * S * I
      dI <-    beta * S * I - gamma * I
      dR <-    gamma * I
      dCInc <- beta * S * I
      return(list(c(dS, dI, dR, dCInc)))
    })
  }
  
  parameters_values <- c(beta = beta, gamma = gamma)
  initial_values <- c(S = S0, I = I0, R = R0, CInc = 0)
  
  out <- ode(initial_values, times, sir_equations, parameters_values)

  out <- as.data.frame(out)
  # Compute incidence from cumulative incidence
  out$Inc <- c(I0, diff(out$CInc))
  out$CInc <- NULL
  out
}
```

::: {#lst-seir-det}

```{r}
seir_mod <- function(beta, sigma, gamma, S0, E0, I0, R0, times) {
  
  sir_equations <- function(time, variables, parameters) {
    with(as.list(c(variables, parameters)), {
      dS <-   -beta * I * S
      dE <-    beta * I * S - sigma * E
      dI <-    sigma * E - gamma * I
      dR <-    gamma * I
      dCInc <- sigma * E
      return(list(c(dS, dE, dI, dR, dCInc)))
    })
  }
  
  parameters_values <- c(beta = beta, sigma = sigma, gamma = gamma)
  initial_values <- c(S = S0, E = E0, I = I0, R = R0, CInc = 0)
  
  out <- ode(initial_values, times, sir_equations, parameters_values)

  out <- as.data.frame(out)
  # Compute incidence from cumulative incidence
  out$Inc <- c(I0, diff(out$CInc))
  out$CInc <- NULL
  out
}
```

Deterministic SEIR model

:::

```{r}
#| code-fold: true
#| fig-width: 4
#| fig-height: 4
#| out-width: "100%"
pred1 <- sir_mod(beta = 0.004, gamma = 0.5, S0 = 999, I0 = 1, R0 = 0, times = 1:20)
pred2 <- seir_mod(beta = 0.004, sigma = 0.5, gamma = 0.5, S0 = 999, E0 = 0, I0 = 1, R0 = 0, times = 1:20)

df_plot <- pivot_longer(pred1, cols = S:Inc, names_to = "comp", values_to = "n")

my_palette <- brewer.pal(11, "PuOr")[c(10, 4, 3, 8)]

p1 <- ggplot(df_plot, aes(x = time, y = n, color = comp)) +
  geom_point() + geom_line() +
  scale_color_manual(values = my_palette, breaks = c("S", "Inc", "I", "R")) +
  labs(color = NULL, y = NULL) +
  theme_minimal() +
  theme(legend.position = "none")

df_plot <- pivot_longer(pred2, cols = S:Inc, names_to = "comp", values_to = "n")

my_palette <- brewer.pal(11, "PuOr")[c(10, 1, 4, 3, 8)]

p2 <- ggplot(df_plot, aes(x = time, y = n, color = comp)) +
  geom_point() + geom_line() +
  scale_color_manual(values = my_palette, breaks = c("S", "E", "Inc", "I", "R")) +
  labs(color = NULL, y = NULL) +
  theme_minimal() +
  theme(legend.position = "bottom")

p1 / p2
```

